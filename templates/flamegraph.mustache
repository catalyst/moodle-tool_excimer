{{!
    This file is part of Moodle - https://moodle.org/

    Moodle is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Moodle is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Moodle.  If not, see <http://www.gnu.org/licenses/>.
}}
{{!
    @template tool_excimer/flamegraph

    Markup for displaying a flame graph.

    Classes required for JS:
    * none

    Data attributes required for JS:
    * none

    Context variables required for this template:
    * id - The id of the profile
    * lang - Language setting

    Example context (json):
    {
        "id" : 3,
        "lang" : "en"
    }
}}

<h4>Profile Flame Graph</h4>

<div id="loading">
    Loading...
</div>

<div id="flamechart" style="margin-top: 1rem;"></div>
<div id="flamedetails" style="min-height: 1.5rem; clear: both;"></div>

<script>

init();
window.addEventListener('resize', _ => init());

function displaysamplestats(d) {
    let time = d.value * {{samplerate}};
    let seconds = time / 1000;
    let minutes = Math.floor(seconds / 60);
    let hours = Math.floor(minutes / 60);
    minutes = minutes % 60;
    seconds = (seconds % 60).toFixed(3);

    let durationstr = '';
    if (hours) {
        durationstr += `${hours}h `;
    }
    if (minutes) {
        durationstr += `${minutes}m `;
    }
    if (seconds) {
        if (durationstr !== '') {
            seconds = Math.round(seconds);
        }
        durationstr += `${seconds}s`;
    }

    const percentage = ((d.x1 - d.x0) * 100).toFixed(3);
    const samplecount = d.value.toLocaleString("{{lang}}");

    return d.data.name + ` (${percentage}%, ${samplecount} {{#str}} samples, tool_excimer {{/str}}, {{#str}} duration, tool_excimer {{/str}} ~ ${durationstr}})`;
}

function init() {

    let flamechart = document.getElementById('flamechart');
    let flamedetails = document.getElementById("flamedetails");

    const chartWidth = Math.max(flamechart.offsetWidth - 15, 500);

    window.excimerChart = flamegraph();
    window.excimerChart.width(chartWidth);
    window.excimerChart.setDetailsElement(flamedetails);

    if (window.excimerData === undefined) {
        setLoading(true);
        d3.json('flamegraph.json.php?profileid={{id}}')
            .then(function(data) {
                setLoading(false);
                window.excimerData = data;
                draw();
            }).catch(function(error) {
                console.warn(error);
            });
    } else {
        draw();
    }

    window.excimerChart.label(displaysamplestats);

    const tip = flamegraph.tooltip.defaultFlamegraphTooltip().text(displaysamplestats);
    window.excimerChart.tooltip(tip);
}

function draw() {
    let svg = document.querySelector('#flamechart svg');
    if (svg !== null) {
        svg.remove();
    }
    // Append SVG:
    d3.select("#flamechart").datum(window.excimerData).call(window.excimerChart);
}

function setLoading(yn) {
    document.getElementById('loading').style.display = yn ? 'block' : 'none';
}

function search() {
    if (window.excimerChart !== undefined) {
        let term = document.getElementById("term").value;
        window.excimerChart.search(term);
    }
}

function clear() {
    if (window.excimerChart !== undefined) {
        document.getElementById('term').value = '';
        window.excimerChart.clear();
    }
}

function resetZoom() {
    if (window.excimerChart !== undefined) {
        window.excimerChart.resetZoom();
    }
}
</script>
